/*
 * RADAR_HCSR04.c
 *
 *  Created on: Feb 17, 2025
 *      Author: Grupo 3_TD2	Enrique Emanuel Decima, Castro Oscar Martin, Ortiz Nicolas Agustin
 */

#include "hcsr04.h"

#define FILTER_WIDTH 1
#define MEASURES_DELAY 50	//Intervalo (ms) entre mediciones consecutivas
#define HC_SR04_MIN_DISTANCE_MM    20      // 2 cm
#define HC_SR04_MAX_DISTANCE_MM    4000    // 4 metros
#define HC_SR04_MIN_TICKS          116      // Corresponde a 2 cm
#define HC_SR04_MAX_TICKS          23200    // Corresponde a 4 m
#define HC_SR04_TIMEOUT_TICKS      58800    // 10 metros (timeout)


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);

/*Variables para el Timer*/
uint32_t IC_Val1 = 0;
uint32_t IC_Val2 = 0;
uint32_t Difference = 0;
bool Capture_flag = 0;

/*Variables para la Aplicacion*/
uint8_t Distance = 0;
uint16_t Distance_mm = 0;

uint16_t Filter[FILTER_WIDTH];

/*
 * @brief Inicializacion del Modulo Timer1 Canal1 como Input Capture
 * @param None
 * @retval None
 */
void HCSR04_Init(){
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
}


/*
 * @brief Delay en el orden de los microsegundos
 * @param uint16_t us
 * @retval None
 */
static void HCSR04_Delay_us (uint16_t us){
	__HAL_TIM_SET_COUNTER(&htim3,0);
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);
}


/*
 * @brief Emite un pulso de 10us para la posterior lectura del sensor
 * @param None
 * @retval None
 */
static void HCSR04_Read(){
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);
	HCSR04_Delay_us(10);
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
	__HAL_TIM_ENABLE_IT(&htim3	, TIM_IT_CC1);
}

/*
 * @brief Captura varias lecturas y las almacena en un arreglo llamado Filter
 * @param None
 * @retval None
 */
static void HCSR04_CaptureMeasures(){
	for(int i=0;i<FILTER_WIDTH;i++){
		HCSR04_Read();
		Filter[i] = Distance_mm;
		HAL_Delay(MEASURES_DELAY);
	}
}


/*
 * @brief Resetea el arreglo llamado Filter para que no contenga valores de
 * 		  mediciones anteriores
 * @param None
 * @retval None
 */
static void HCSR04_ResetFilter(){
	for(int i=0;i<sizeof(Filter);i++){
		Filter[i] = 0;
	}
}

/*
 * @brief Ordena el arreglo Filter de menor a mayor para luego calcular la mediana
 * 		  de sus valores
 * @param None
 * @retval None
 */
static void HCSR04_BubbleSort(){
	for (int i = 0; i < FILTER_WIDTH - 1; i++) {
		for (int j = 0; j < FILTER_WIDTH - i - 1; j++) {
			if (Filter[j] > Filter[j + 1]) {
				int temp = Filter[j];
				Filter[j] = Filter[j+1];
				Filter[j+1] = temp;
			}
		}
	}
}


/*
 * @brief Realiza varias mediciones y calcula la mediana de todos los valores
 * @param None
 * @retval distance_t
 */
uint8_t HCSR04_GetMeasure(){
	HCSR04_ResetFilter();
	HCSR04_CaptureMeasures();
	HCSR04_BubbleSort();
	return Filter[FILTER_WIDTH/2];
}


/*
 * @brief Calcula la distancia instantanea a traves del modulo TIMER Input Capture
 * @param TIM_HandleTypeDef *htim
 * @retval None
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
    {
        if (Capture_flag == 0)  // Rising edge
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
            Capture_flag = 1;
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
        }
        else if (Capture_flag == 1)  // Falling edge
        {
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
            __HAL_TIM_SET_COUNTER(htim, 0);

            // Cálculo de diferencia con manejo de overflow
            if(IC_Val2 >= IC_Val1){
                Difference = IC_Val2 - IC_Val1;
            }else{
                Difference = (65535 - IC_Val1) + IC_Val2 + 1;
            }

            // Validación de rango y cálculo
            if (Difference >= HC_SR04_MIN_TICKS && Difference <= HC_SR04_MAX_TICKS) {
                // Cálculo preciso: 0.343 mm/µs / 2 = 0.1715 mm/µs
                uint32_t distance_mm_x10 = (Difference * 1715) / 10000;  // Evitar float
                Distance = (uint8_t)(distance_mm_x10 / 10);  // Para compatibilidad
                Distance_mm = (uint16_t)distance_mm_x10;     // Nueva variable para mm
            } else {
                Distance = 255;        // Valor de error
                Distance_mm = 0xFFFF;  // Valor de error
            }

            Capture_flag = 0;
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
        }
    }
}
